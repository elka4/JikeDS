package _JAVA;

import org.junit.Test;

import java.io.*;

import static org.junit.Assert.assertEquals;

public class Char {
    //https://stackoverflow.com/questions/13717898/java-character-literals-value-with-getnumericvalue
    //Java Character literals value with getNumericValue()

    @Test
    public void test01(){
        char ch1 = 'A';
        char ch2 = 'a';
        char ch3 = 'Z';
        char ch4 = 'z';

        System.out.println("ch1 -- > " + Integer.toBinaryString(Character.getNumericValue(ch1)));
        System.out.println("ch2 -- > " + Integer.toBinaryString(Character.getNumericValue(ch2)));
        System.out.println("ch3 -- > " + Integer.toBinaryString(Character.getNumericValue(ch3)));
        System.out.println("ch4 -- > " + Integer.toBinaryString(Character.getNumericValue(ch4)));
    }

    /*
    ch1 -- > 1010
    ch2 -- > 1010
    ch3 -- > 100011
    ch4 -- > 100011
     */

    /*
    The letters A-Z in their uppercase ('\\u0041' through '\\u005A'), lowercase ('\\u0061' through '\\u007A'), and full width variant ('\\uFF21' through '\\uFF3A' and '\\uFF41' through '\\uFF5A') forms have numeric values from 10 through 35.
Basically this means that when parsing hex (say), 0xfa == 0xFA, as you'd expect.
     */
/*
Judging from the commentary, you're actually looking for the codepoints of the characters, rather than their numeric value, so I'll just isolate that into an answer. The getNumericValue() function returns what the character means as a number when interpreting its glyph, it does not return the codepoint of a character. For instance, getNumericValue('5') returns 5 as an int, not the codepoint of 5.
 */
    @Test
    public void test02(){
        char ch1 = 'A';
        char ch2 = 'a';
        char ch3 = 'Z';
        char ch4 = 'z';

        System.out.println("ch1 -- > " + Character.getNumericValue(ch1));
        System.out.println("ch2 -- > " + Character.getNumericValue(ch2));

        System.out.println("ch3 -- > " + Character.getNumericValue(ch3));
        System.out.println("ch4 -- > " + Character.getNumericValue(ch4));

    }
    /*
    ch1 -- > 10
    ch2 -- > 10
    ch3 -- > 35
    ch4 -- > 35
     */

//-------------------------------------------------------------------------////

    @Test
    public void test03(){
        System.out.println('\u0041');
        System.out.println('\u0061');
        System.out.println('\uFF21');
        System.out.println('\uFF41');
    }
    /*
    A
    a
    Ôº°
    ÔΩÅ
     */
//-------------------------------------------------------------------------////
    @Test
    public void test04(){
        System.out.println('\u0041' == '\u0061');
    }
//-------------------------------------------------------------------------////

    /*
    getNumericValue
public static int getNumericValue(char ch)
Returns the int value that the specified Unicode character represents. For example, the character '\\u216C' (the roman numeral fifty) will return an int with a value of 50.
The letters A-Z in their uppercase ('\\u0041' through '\\u005A'), lowercase ('\\u0061' through '\\u007A'), and full width variant ('\\uFF21' through '\\uFF3A' and '\\uFF41' through '\\uFF5A') forms have numeric values from 10 through 35. This is independent of the Unicode specification, which does not assign numeric values to these char values.

If the character does not have a numeric value, then -1 is returned. If the character has a numeric value that cannot be represented as a nonnegative integer (for example, a fractional value), then -2 is returned.

Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the getNumericValue(int) method.

Parameters:
ch - the character to be converted.
Returns:
the numeric value of the character, as a nonnegative int value; -2 if the character has a numeric value that is not a nonnegative integer; -1 if the character has no numeric value.
Since:
1.1
     */

    /*
    getNumericValue
public static int getNumericValue(int codePoint)
Returns the int value that the specified character (Unicode code point) represents. For example, the character '\\u216C' (the Roman numeral fifty) will return an int with a value of 50.
The letters A-Z in their uppercase ('\\u0041' through '\\u005A'), lowercase ('\\u0061' through '\\u007A'), and full width variant ('\\uFF21' through '\\uFF3A' and '\\uFF41' through '\\uFF5A') forms have numeric values from 10 through 35. This is independent of the Unicode specification, which does not assign numeric values to these char values.

If the character does not have a numeric value, then -1 is returned. If the character has a numeric value that cannot be represented as a nonnegative integer (for example, a fractional value), then -2 is returned.

Parameters:
codePoint - the character (Unicode code point) to be converted.
Returns:
the numeric value of the character, as a nonnegative int value; -2 if the character has a numeric value that is not a nonnegative integer; -1 if the character has no numeric value.
Since:
1.5

     */
//-------------------------------------------------------------------------////

    @Test
    public void test05(){
        final int RADIX = 10;
        int i = 4;
        char ch = Character.forDigit(i, RADIX);
        System.out.println(ch); // Prints '4'

        //There is also a method that can convert from a char back to an int:

        int i2 = Character.digit(ch, RADIX);
        System.out.println(i2); // Prints '4'

    }
//-------------------------------------------------------------------------////

    @Test
    public void test06() {
        byte b = 65;
        for (byte i = b; i <= b + 25; i++) {
            System.out.print((char) i + ", ");
        }
    }//A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,

//-------------------------------------------------------------------------////
    //  https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
    @Test
    public void test07() {
//        byte b = 24;
        for (byte i = -128; i < 127; i++) {
            System.out.print(i + ": ");
            System.out.print((char) i + ", ");
            System.out.print(Character.getNumericValue((char) i )+ "; ");
            System.out.println();
        }
    }
    /*
-128: ÔæÄ, -1;
-127: ÔæÅ, -1;
-126: ÔæÇ, -1;
-125: ÔæÉ, -1;
-124: ÔæÑ, -1;
-123: ÔæÖ, -1;
-122: ÔæÜ, -1;
-121: Ôæá, -1;
-120: Ôæà, -1;
-119: Ôæâ, -1;
-118: Ôæä, -1;
-117: Ôæã, -1;
-116: Ôæå, -1;
-115: Ôæç, -1;
-114: Ôæé, -1;
-113: Ôæè, -1;
-112: Ôæê, -1;
-111: Ôæë, -1;
-110: Ôæí, -1;
-109: Ôæì, -1;
-108: Ôæî, -1;
-107: Ôæï, -1;
-106: Ôæñ, -1;
-105: Ôæó, -1;
-104: Ôæò, -1;
-103: Ôæô, -1;
-102: Ôæö, -1;
-101: Ôæõ, -1;
-100: Ôæú, -1;
-99: Ôæù, -1;
-98: Ôæû, -1;
-97: Ôæü, -1;
-96: Ôæ†, -1;
-95: Ôæ°, -1;
-94: Ôæ¢, -1;
-93: Ôæ£, -1;
-92: Ôæ§, -1;
-91: Ôæ•, -1;
-90: Ôæ¶, -1;
-89: Ôæß, -1;
-88: Ôæ®, -1;
-87: Ôæ©, -1;
-86: Ôæ™, -1;
-85: Ôæ´, -1;
-84: Ôæ¨, -1;
-83: Ôæ≠, -1;
-82: ÔæÆ, -1;
-81: ÔæØ, -1;
-80: Ôæ∞, -1;
-79: Ôæ±, -1;
-78: Ôæ≤, -1;
-77: Ôæ≥, -1;
-76: Ôæ¥, -1;
-75: Ôæµ, -1;
-74: Ôæ∂, -1;
-73: Ôæ∑, -1;
-72: Ôæ∏, -1;
-71: Ôæπ, -1;
-70: Ôæ∫, -1;
-69: Ôæª, -1;
-68: Ôæº, -1;
-67: ÔæΩ, -1;
-66: Ôææ, -1;
-65: Ôæø, -1;
-64: ÔøÄ, -1;
-63: ÔøÅ, -1;
-62: ÔøÇ, -1;
-61: ÔøÉ, -1;
-60: ÔøÑ, -1;
-59: ÔøÖ, -1;
-58: ÔøÜ, -1;
-57: Ôøá, -1;
-56: Ôøà, -1;
-55: Ôøâ, -1;
-54: Ôøä, -1;
-53: Ôøã, -1;
-52: Ôøå, -1;
-51: Ôøç, -1;
-50: Ôøé, -1;
-49: Ôøè, -1;
-48: Ôøê, -1;
-47: Ôøë, -1;
-46: Ôøí, -1;
-45: Ôøì, -1;
-44: Ôøî, -1;
-43: Ôøï, -1;
-42: Ôøñ, -1;
-41: Ôøó, -1;
-40: Ôøò, -1;
-39: Ôøô, -1;
-38: Ôøö, -1;
-37: Ôøõ, -1;
-36: Ôøú, -1;
-35: Ôøù, -1;
-34: Ôøû, -1;
-33: Ôøü, -1;
-32: Ôø†, -1;
-31: Ôø°, -1;
-30: Ôø¢, -1;
-29: Ôø£, -1;
-28: Ôø§, -1;
-27: Ôø•, -1;
-26: Ôø¶, -1;
-25: Ôøß, -1;
-24: Ôø®, -1;
-23: Ôø©, -1;
-22: Ôø™, -1;
-21: Ôø´, -1;
-20: Ôø¨, -1;
-19: Ôø≠, -1;
-18: ÔøÆ, -1;
-17: ÔøØ, -1;
-16: Ôø∞, -1;
-15: Ôø±, -1;
-14: Ôø≤, -1;
-13: Ôø≥, -1;
-12: Ôø¥, -1;
-11: Ôøµ, -1;
-10: Ôø∂, -1;
-9: Ôø∑, -1;
-8: Ôø∏, -1;
-7: Ôøπ, -1;
-6: Ôø∫, -1;
-5: Ôøª, -1;
-4: Ôøº, -1;
-3: ÔøΩ, -1;
-2: Ôøæ, -1;
-1: Ôøø, -1;
0:  , -1;
1: , -1;
2: , -1;
3: , -1;
4: , -1;
5: , -1;
6: , -1;
7: , -1;
8:, -1;
9: 	, -1;
10:
, -1;
11: , -1;
12: , -1;
, -1;
14: , -1;
15: , -1;
16: , -1;
17: , -1;
18: , -1;
19: , -1;
20: , -1;
21: , -1;
22: , -1;
23: , -1;
24: , -1;
25: , -1;
26: , -1;
27: , -1;
28: , -1;
29: , -1;
30: , -1;
31: , -1;
32:  , -1;
33: !, -1;
34: ", -1;
35: #, -1;
36: $, -1;
37: %, -1;
38: &, -1;
39: ', -1;
40: (, -1;
41: ), -1;
42: *, -1;
43: +, -1;
44: ,, -1;
45: -, -1;
46: ., -1;
47: /, -1;
48: 0, 0;
49: 1, 1;
50: 2, 2;
51: 3, 3;
52: 4, 4;
53: 5, 5;
54: 6, 6;
55: 7, 7;
56: 8, 8;
57: 9, 9;
58: :, -1;
59: ;, -1;
60: <, -1;
61: =, -1;
62: >, -1;
63: ?, -1;
64: @, -1;
65: A, 10;
66: B, 11;
67: C, 12;
68: D, 13;
69: E, 14;
70: F, 15;
71: G, 16;
72: H, 17;
73: I, 18;
74: J, 19;
75: K, 20;
76: L, 21;
77: M, 22;
78: N, 23;
79: O, 24;
80: P, 25;
81: Q, 26;
82: R, 27;
83: S, 28;
84: T, 29;
85: U, 30;
86: V, 31;
87: W, 32;
88: X, 33;
89: Y, 34;
90: Z, 35;
91: [, -1;
92: \, -1;
93: ], -1;
94: ^, -1;
95: _, -1;
96: `, -1;
97: a, 10;
98: b, 11;
99: c, 12;
100: d, 13;
101: e, 14;
102: f, 15;
103: g, 16;
104: h, 17;
105: i, 18;
106: j, 19;
107: k, 20;
108: l, 21;
109: m, 22;
110: n, 23;
111: o, 24;
112: p, 25;
113: q, 26;
114: r, 27;
115: s, 28;
116: t, 29;
117: u, 30;
118: v, 31;
119: w, 32;
120: x, 33;
121: y, 34;
122: z, 35;
123: {, -1;
124: |, -1;
125: }, -1;
126: ~, -1;
     */

//-------------------------------------------------------------------------////

    Character c;
//-------------------------------------------------------------------------////
    /*
          If the character does not have a numeric value, then -1 is returned.
      If the character has a numeric value that cannot be represented as a
      nonnegative integer (for example, a fractional value), then -2
      is returned.
     */
@Test
public void test08() {
    int i = 88888;
//    System.out.print((char) i + ", ");
    //Â¶ÇÊûúÂ≠óÁ¨¶‰∏≠Êúâ‰∏Ä‰∏™‰∏çÊòØÈùûË¥üÊï¥Êï∞ÁöÑÊï∞ÂÄºÔºåÂàôËøîÂõû-2Ôºõ
    System.out.print((char)-Math.PI);
    System.out.print(Character.getNumericValue(Integer.MIN_VALUE));
    System.out.print(Character.getNumericValue( '\u216C'));
}
//-------------------------------------------------------------------------////
    //http://blog.csdn.net/lipipifighting/article/details/47321853

    //ÂÖ≥‰∫éCharacterÁöÑdigitÔºåforDigitÔºågetNumericValueÊñπÊ≥ïÁöÑ‰∏ÄÁÇπÁêÜËß£
/*
CharacterÁ±ªÊòØ‰∏Ä‰∏™ÂåÖË£ÖÁ±ª„ÄÇ
charËøôÁßçÊï∞ÊçÆÁ±ªÂûãÊòØÂü∫‰∫éÂéüÂßãÁöÑUnicodeÁºñÁ†ÅÁöÑÔºåÂÇ®Â≠ò‰∏Ä‰∏™charÁî®16‰∏™bitÔºåÂõ†Ê≠§ÂÆö‰πâcharacters‰πüÊòØ16‰ΩçÂÆöÈïøÁöÑÂÆû‰ΩìÈõÜÂêà„ÄÇ
UnicodeÁºñÁ†ÅÊ†áÂáÜÂèëÁîü‰∫ÜÂèòÂåñÔºåÊï∞ÈáèÁ∫ß‰ªé\\uFFFFÂà∞‰∫Ü\\u10FFFF
ÂØπUnicodeÊ†áÂáÜ‰∏≠ÁöÑÊâÄÊúâÂ≠óÁ¨¶Ôºå16‰ΩçÂ∑≤ÁªèÊòØ‰∏çÂ§üÁöÑ‰∫ÜÔºåÂç≥‰∏ÄÈÉ®ÂàÜÂ≠óÁ¨¶Âπ∂‰∏çËÉΩÈÄöËøácharÊù•Ë°®Á§∫‰∫Ü„ÄÇ
Êàë‰ª¨Áß∞\\u0000 to \\uFFFFÁöÑÂ≠óÁ¨¶ÈõÜÂêàÔºå‰πüÂ∞±ÊòØÁî®‰∏Ä‰∏™charËÉΩÂ§üË°®Á§∫ÁöÑÂ≠óÁ¨¶ÁöÑÈõÜÂêàÔºå‰∏∫the Basic Multilingual Plane (BMP)ÔºàÂü∫Êú¨Â≠óÁ¨¶Ôºâ„ÄÇ
ËÄåÁß∞Á†ÅÁÇπÔºàcode pointÔºâÂ§ß‰∫é\\uFFFFÁöÑÂ≠óÁ¨¶ÈõÜÂêà‰∏∫supplementary charactersÔºàË°•ÂÖÖÂ≠óÁ¨¶Ôºâ„ÄÇ
‰∏∫‰∫ÜËß£ÂÜ≥Ë°•ÂÖÖÂ≠óÁ¨¶Ë°®Á§∫ÁöÑÈóÆÈ¢òÔºåÈ¶ñÂÖàÊÉ≥Âà∞ÁöÑÊòØÂü∫Êú¨Êï∞ÊçÆÁ±ªÂûãintÔºå‰∏Ä‰∏™intÂØπË±°Âç†‰∫Ü32bitÔºåËÇØÂÆöÂèØ‰ª•Ë°®ËææÊâÄÊúâÁöÑÂ≠óÁ¨¶„ÄÇ
‰ΩÜÊòØË°®Á§∫Âü∫Êú¨Â≠óÁ¨¶ÔºåÂè™ÈúÄË¶Å16‰ΩçÂ∞±Â§ü‰∫ÜÔºåË°®Á§∫‰∏Ä‰∏™Ë°•ÂÖÖÂ≠óÁ¨¶Ôºå‰πüÂè™ÈúÄË¶Å21‰ΩçÔºåÈ´ò‰ΩçÁöÑ11‰ΩçÈÉΩ‰∏∫0ÔºåÂæàÊµ™Ë¥πÁ©∫Èó¥ÂëêÔºÅ
Ëøô‰∏™Êó∂ÂÄôÂèØ‰ª•ËÄÉËôë‰ΩøÁî®Âà∞CharacterËøô‰∏™ÂåÖË£ÖÁ±ª‰∫Ü
ÂÖÅËÆ∏‰∏Ä‰∏™CharacterÁöÑÂØπË±°ÂåÖË£Ö‰∏Ä‰∏™ÊàñËÄÖ‰∏§‰∏™Âü∫Êú¨Á±ªÂûã‰∏∫charÁöÑÂÄºÔºåË°•ÂÖÖÂ≠óÁ¨¶Â∞±Êã•Êúâ‰∫Ü‰∏§‰∏™Âü∫Êú¨Á±ªÂûã‰∏∫charÁöÑÂÄº„ÄÇ
ÂÖ∂‰∏≠ÔºåÈ´ò‰ΩçÁöÑcharÁöÑÂèñÂÄºËåÉÂõ¥ÊòØ\\uD800--\\uDBFFÔºà4*16*16ÁßçÔºâÔºå‰Ωé‰ΩçÁöÑcharÁöÑÂèñÂÄºËåÉÂõ¥ÊòØ\\uDC00--\\uDFFFÔºà4*16*16ÁßçÔºâ„ÄÇ
4*16*16*4*16*16==0x10*16*16*16*16ÔºåÂèØ‰ª•ÂÆåÊï¥Ë°®ËææÊâÄÊúâË°•ÂÖÖÂ≠óÁ¨¶„ÄÇ
CharacterÊúâ‰∏§ÁßçÊûÑÈÄ†ÊñπÊ≥ïÔºåÂÆÉÊé•Âèó‰∏çÂêåÁöÑÂèÇÊï∞Á±ªÂûã„ÄÇ
‰∏ÄÁßçÊòØcharÔºåËøôÊ†∑Ëá™ÁÑ∂‰∏çËÉΩÂÆûÁé∞Ë°•ÂÖÖÂ≠óÁ¨¶ÁöÑÊûÑÈÄ†Character
Âè¶‰∏ÄÁßçÂ∞±ÊòØintÔºå‰∏Ä‰∏™intÁöÑËåÉÂõ¥ÊòØ0x00000000-0xFFFFFFFFÔºåÂèØ‰ª•Êãø‰ªªÊÑè‰∏Ä‰∏™Â≠óÁ¨¶ÁöÑUnicodeÁºñÁ†ÅÂÄºÊù•‰Ωú‰∏∫ÂèÇÊï∞
Âá†‰∏™ÊØîËæÉÈöæÊáÇÔºåÂèàÂèØËÉΩ‰ºöÁî®Âà∞ÁöÑÊñπÊ≥ï‰ªãÁªçÔºö

1.public static int digit(char ch,int radix)

È¶ñÂÖàÂü∫Êï∞radixÂøÖÈ°ªÊª°Ë∂≥Âú®ÂºÄÂå∫Èó¥[Character.MIN_RADIX ,Character.MAX_RADIX ]‰πãÂÜÖÔºåÂê¶ÂàôÁõ¥Êé•ËøîÂõû-1Ôºõ
Character.MIN_RADIX = 2;Character.MAX_RADIX = 36Ôºå‰∏∫‰ªÄ‰πàÊòØ2Âíå36Âë¢Ôºü
ÁÑ∂ÂêéchÔºàch‰ºöË¢´ÈªòËÆ§ËΩ¨ÂåñÊàêCharacterÔºâ‰πüÂøÖÈ°ªÊòØÊúâÊïàÁöÑÔºåchÊÄéÊ†∑ÊâçÁÆóÊúâÊïàÂë¢ÔºüÂàÜ‰ª•‰∏ãÂá†ÁßçÊÉÖÂÜµÔºö
1.isDigit(ch)==trueÔºå‰πüÂ∞±ÊòØnew Character(ch).getType(ch)==DECIMAL_DIGIT_NUMBERÔºå‰πüÂ∞±ÊòØÂèØËÉΩÊòØ‰∏Ä‰∏™Êï∞Â≠ó„ÄÇ
Êï∞Â≠óÂèØ‰ª•ÊúâÂæàÂ§öÔºå‚Äò0‚Äô--‚Äò9‚ÄôÔºö
'\\u0030' through '\\u0039', ISO-LATIN-1 digits ('0' through '9')
'\\u0660' through '\\u0669', Arabic-Indic digits
'\\u06F0' through '\\u06F9', Extended Arabic-Indic digits
'\\u0966' through '\\u096F', Devanagari digits
'\\uFF10' through '\\uFF19', Fullwidth digits
2.chÊòØÂ§ßÂÜôÂ≠óÊØç'A'('\\u65')--'Z'('\\u90')ÊàñËÄÖÂ∞èÂÜôÂ≠óÊØç'a'('\\u97')--'z'('\\u122')‰∏≠ÁöÑ‰∏Ä‰∏™Êó∂ÔºåA/aÂØπÂ∫îÊòØ10Ôºå‰æùÊ¨°‰∏ãÂéªZ/zÂØπÂ∫îÁöÑÂ∞±ÊòØ35.
‰ΩÜÊòØÂêåÊó∂ÂØπÂ∫îÁöÑÈÇ£‰∏™Êï∞Â≠ó‰∏çËÉΩÂ§ß‰∫éÊàñËÄÖÁ≠â‰∫éradixÔºåÂ¶ÇÊûúÂ§ß‰∫éÊàñËÄÖÁ≠â‰∫é‰∫ÜradixËøòÊòØËøîÂõû-1ÔºåÂê¶ÂàôÂ∞ÜÊï∞Â≠óËøîÂõû
3.chÊòØÂÖ®ÂÆΩÂ§ßÂÜôÂ≠óÊØç'A'('\\uFF21')--'Z'('\\uFF3A')ÊàñËÄÖÂÖ®ÂÆΩÂ∞èÂÜôÂ≠óÊØç'a'('\\uFF41')--'z'('\\uFF5A')‰∏≠ÁöÑ‰∏Ä‰∏™Êó∂ÔºåA/aÂØπÂ∫îÊòØ10Ôºå‰æùÊ¨°‰∏ãÂéªZ/zÂØπÂ∫îÁöÑÂ∞±ÊòØ35.
‰ΩÜÊòØÂêåÊó∂ÂØπÂ∫îÁöÑÈÇ£‰∏™Êï∞Â≠ó‰∏çËÉΩÂ§ß‰∫éÊàñËÄÖÁ≠â‰∫éradixÔºåÂ¶ÇÊûúÂ§ß‰∫éÊàñËÄÖÁ≠â‰∫é‰∫ÜradixËøòÊòØËøîÂõû-1ÔºåÂê¶ÂàôÂ∞ÜÊï∞Â≠óËøîÂõû
public static int digit(int codePoint,int radix)Êú¨Ë¥®‰∏äÊòØ‰∏ÄÊ†∑ÁöÑÔºåÂè™ÊòØcharÁé∞Âú®Â∑≤Áªè‰∏çËÉΩË°®Á§∫ÊâÄÊúâÁöÑÂ≠óÁ¨¶‰∫ÜÔºå
Êúâ‰∫õË°•ÂÖÖÂ≠óÁ¨¶Âè™Áî®Â≠óÁ¨¶ÁöÑUnicodeÁºñÁ†ÅÂÄºÔºåÁî®‰∏Ä‰∏™intÊù•Ë°®Á§∫‰∫ÜÔºåÊâÄ‰ª•ÂØπÂ∫î‰πüÁî®Áî®‰∏Ä‰∏™intË°®Á§∫‰∏Ä‰∏™Â≠óÁ¨¶Êù•‰º†ÂèÇÁöÑÊñπÊ≥ï
digit('A',16)Âíådigit(65,16)ÁöÑÁªìÊûúÊòØ‰∏ÄÊ†∑ÁöÑ„ÄÇ(int)'A'==65
2.public static char forDigit(int digit,int radix)

È¶ñÂÖàÂü∫Êï∞radixÊúâÊïàÔºàÂç≥Âú®ÂºÄÂå∫Èó¥[2,36]ÂÜÖÔºâ
ÁÑ∂ÂêédigitË¶ÅÊúâÊïàÔºåÂç≥0<=digit<radixÔºàÂ•ΩÂÉèÂ§öÂ∞ëÂ§öÂ∞ëËøõÂà∂‰∏ÄÊ†∑ÔºåÊúÄÈ´ò36ËøõÂà∂ÔºåÊúÄ‰Ωé‰∫åËøõÂà∂Ôºâ
0-9ÂàÜÂà´ÂØπÂ∫îÁöÑ'0'-'9'Ôºå10-35ÂàÜÂà´ÂØπÂ∫îÁöÑÂ∞èÂÜôÁöÑ'a'-'z'
Âè™ÊúâÂΩìradixÂíådigitÂêåÊó∂ÊúâÊïàÁöÑÊó∂ÂÄôÊâçËøîÂõûÂ≠óÁ¨¶ÔºåÂê¶ÂàôËøîÂõû'\\u0000'Á©∫Â≠óÁ¨¶
3.public static int getNumericValue(char ch)

Returns the int value that the specified Unicode character represents.
ËøîÂõûÊåáÂÆöÁöÑUnicodeÂ≠óÁ¨¶Ë°®Á§∫ÁöÑintÂÄº„ÄÇ
For example, the character '\\u216C' (the roman numeral fifty) will return an int with a value of 50.
‰æãÂ¶ÇÔºåÂ≠óÁ¨¶'\ u216C'(ÁΩóÈ©¨Êï∞Â≠ó50)Â∞ÜËøîÂõû‰∏Ä‰∏™int ÂÄº50„ÄÇ
Â≠óÁ¨¶'0'-'9'Â∞±ËøîÂõû0-9
Â≠óÁ¨¶‰∏çÁÆ°ÊòØ'A'('\\u65')--'Z'('\\u90')Ôºå'a'('\\u97')--'z'('\\u122')ÔºåËøòÊòØ'A'('\\uFF21')--'Z'('\\uFF3A')Ôºå'a'('\\uFF41')--'z'('\\uFF5A')
ÈÉΩÂØπÂ∫îËøîÂõûÁöÑÊòØ10-35
public static int getNumericValue(int codePoint)Â∞±ÊòØÂØπÂ∫îÁöÑÁî®‰∏Ä‰∏™intË°®Á§∫‰∏Ä‰∏™Â≠óÁ¨¶Êù•‰º†ÂèÇÁöÑÊñπÊ≥ï
ÊÄªÁªì

ÁÆÄÂçïËÆ≤ÂÖ∂ÂÆûÂ∞±ÊòØÔºåradixÁ°ÆÂÆöÂü∫Êï∞ÔºåÁ°ÆÂÆöÊòØÂ§öÂ∞ëËøõÂà∂Ôºå‰ªé0Âà∞9ÔºåÂÜç‰ªéaÂà∞zÔºàÂ§ßÂ∞èÂÜô‰∏çÊïèÊÑüÔºâÔºåÂàÜÂà´Ë¢´ËßÜ‰∏∫0Âà∞9Ôºå10Âà∞35
ÂÉèÂçÅÂÖ≠ËøõÂà∂‰∏ÄÊ†∑Êï∞Â≠ó0Âà∞9Ë°®Á§∫‰∫Ü0-9ÔºåÈÇ£9‰πãÂêéÁöÑ10Ôºå11Ôºå12Ôºå13Ôºå14Ôºå15ÊÄé‰πàË°®Á§∫Âë¢ÔºåÂ∞±Êää26‰∏™Â≠óÊØçÊãøÂá∫Êù•Áî®Âïä„ÄÇ
ÊúÄÂ∞ëÊòØ‰∫åËøõÂà∂ÔºàMIN_RADIXÔºâÔºåÊúÄÂ§öÊòØ‰∏âÂçÅÂÖ≠Ôºà10+26=36ÔºâËøõÂà∂ÔºàMAX_RADIXÔºâ„ÄÇ
int digit(char ch,int radix)

ÊòØÂá†ËøõÂà∂‰∏≠Êüê‰∏Ä‰Ωç‰∏äÁöÑÂ≠óÁ¨¶ÔºàÊòØÊï∞Â≠óÊàñËÄÖÂ≠óÊØçÔºâÊâÄÂØπÂ∫îÁöÑÊï∞Â≠óÔºådigit('h',20)==17
char forDigit(int digit,int radix)

ÊòØÂá†ËøõÂà∂‰∏äÊï∞Â≠óÂ∫îËØ•Áî®Âì™‰∏™Â≠óÁ¨¶ÔºàÊòØÊï∞Â≠óÊàñËÄÖÂ≠óÊØçÔºâË°®Á§∫ÔºåforDigit(17,20)=='h'

 */
//-------------------------------------------------------------------------////
    //https://stackoverflow.com/questions/37428441/too-many-characters-in-character-literal-trying-to-check-if-my-value-is-not-wi

    @Test
    public void test09(){
        Character c = '\u0030';
        int value = c.charValue();
        System.out.println(value);
    }

//-------------------------------------------------------------------------////
}
